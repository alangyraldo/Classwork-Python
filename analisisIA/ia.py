# üì¶ Importa m√≥dulos necesarios para configuraci√≥n y conexi√≥n con la API
import os
from dotenv import load_dotenv                      # Para cargar variables de entorno desde un archivo .env
from google.generativeai import configure, GenerativeModel  # SDK oficial para interactuar con Gemini

# ‚úÖ Cargar variables de entorno desde el archivo .env
# Esto permite acceder a la clave de API sin exponerla directamente en el c√≥digo
load_dotenv()

# üîê Configura la API de Gemini usando la clave almacenada en la variable de entorno GEMINI_API_KEY
configure(api_key=os.getenv("GEMINI_API_KEY"))

# ‚úÖ Inicializa el modelo espec√≠fico de Gemini que se va a usar
# "gemini-2.5-flash-lite" es una versi√≥n r√°pida y eficiente, ideal para respuestas √°giles
model = GenerativeModel(model_name="gemini-2.5-flash-lite")

# üß† Funci√≥n principal que env√≠a una pregunta a la IA y devuelve la respuesta
def api_ia(query):
    try:
        # üìù Prompt especializado que define el comportamiento deseado de la IA
        # Le indica que debe resolver problemas algor√≠tmicos en Python, explicar el razonamiento,
        # comentar el c√≥digo y mostrar resultados entendibles en consola
        prompt = """
        Eres una IA especializada en resolver problemas algor√≠tmicos de programaci√≥n avanzada, especialmente en Python.

        Tu tarea es interpretar el problema planteado por el usuario y generar una soluci√≥n completa en Python, acompa√±ada de una explicaci√≥n clara y detallada del razonamiento detr√°s del algoritmo, incluyendo su complejidad temporal y espacial si aplica.

        Debes estar en capacidad de resolver problemas dif√≠ciles como grafos, programaci√≥n din√°mica, estructuras de datos avanzadas, teor√≠a de n√∫meros, backtracking, greedy, y otros temas de algoritmos competitivos.

        Si la pregunta no es de programaci√≥n o no est√° relacionada con algoritmos, responde que no puedes ayudar con esa pregunta.

        Tu respuesta debe estar compuesta por:
        1. Una explicaci√≥n clara del enfoque utilizado.
        2. El c√≥digo completo en Python.
        3. Una breve justificaci√≥n de por qu√© ese enfoque es adecuado para el problema.
        4. Comenta en mayor parte el codigo para entender que sucede dentro de el mismo.
        5. Si es posible, que en consola se imprima el resultado de una manera entendible.

        No uses envoltorios como "success", "result", "status" o "data". Responde directamente con texto plano o HTML simple si es necesario.
        """.strip()

        # üöÄ Env√≠a el prompt + la pregunta del usuario al modelo Gemini
        # La IA genera una respuesta basada en el contexto y las instrucciones del prompt
        response = model.generate_content(f"{prompt}\n\nAcci√≥n:\n{query}")

        # üßæ Extrae el texto plano de la respuesta generada por la IA
        response_text = response.text.strip()

        # ‚úÖ Devuelve la respuesta final al llamador (por ejemplo, main.py)
        return response_text

    # ‚ö†Ô∏è Manejo de errores si ocurre alg√∫n problema durante la conexi√≥n o generaci√≥n
    except Exception as e:
        print("‚ùå Error en la API de Gemini:", str(e))
        return {
            "type": "error",
            "data": "Error al procesar la pregunta con la IA.",
            "error": str(e),
        }